package edu.kit.ipd.are.graphimprove.nlp.accessdecorators;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import edu.kit.ipd.are.archdoclink.nlp.Annotation;
import edu.kit.ipd.are.archdoclink.nlp.Document;
import edu.kit.ipd.are.archdoclink.nlp.Phrase;
import edu.kit.ipd.are.archdoclink.nlp.PhraseType;
import edu.kit.ipd.are.archdoclink.nlp.Sentence;
import edu.kit.ipd.are.archdoclink.nlp.Word;
import edu.kit.ipd.are.graphimprove.nlp.helper.Filter;
import edu.kit.ipd.are.graphimprove.nlp.helper.TextUtil;
import edu.kit.ipd.are.graphimprove.nlp.improvestrategies.SentenceStrategy;
import edu.kit.ipd.are.graphimprove.nlp.improvestrategies.SentenceToPhraseStrategy;
import edu.kit.ipd.parse.luna.graph.INode;

/**
 *  Implement the access of sentence INode, which was generated by the SentenceStrategy
 * 
 * @author dominik
 *
 */
public class ImprovedParseSentence implements Sentence {
	
	private ImprovedParseDocument document;
	private INode sentenceINode;

	public ImprovedParseSentence(ImprovedParseDocument doc, INode sentenceINode) {
		this.document = doc;
		this.sentenceINode = sentenceINode;
	}

	@Override
	public String getText() {
		return TextUtil.concat(this.getWords());
	}

	@Override
	public String getId() {		
		return "" + (Integer)sentenceINode.getAttributeValue(SentenceStrategy.SENTENCE_NUMBER_ATTRIBUTE);
	}

	@Override
	public void annotate(Annotation annotation) {		
		document.annotate(annotation);
	}

	@Override
	public Document getDocument() {
		return this.document;
	}

	@Override
	public List<? extends Phrase> getNounPhrases() {
		return getPhrasesOfType(PhraseType.NOUN_PHRASE);
		
	}

	@Override
	public List<? extends Phrase> getPhrases() {
		return Filter.outgoing(this.sentenceINode, SentenceToPhraseStrategy.SENTENCE2PHRASE).map(
				node -> new ImprovedParsePhrase(node)).collect(Collectors.toList());
	}
	
	@Override
	public List<? extends Phrase> getPhrasesOfType(PhraseType phraseType) {
		return getPhrases().stream().filter(phrase -> phrase.getType() == phraseType).collect(Collectors.toList());
	}


	@Override
	public List<? extends Word> getWords() {
		return Filter.incomming(sentenceINode, SentenceStrategy.WORD_TO_SENCTENCE_ARC_TYPE).map(
				node -> new ImprovedParseWord(node)).collect(Collectors.toList());		
	}
	
	public Optional<? extends Sentence> nextSentence(){
		return Filter.outgoing(this.sentenceINode, SentenceStrategy.SENTENCE_TO_SENCTENCE_ARC_TYPE).map(
				node -> new ImprovedParseSentence(document, node)
				).findFirst();
	}
	
	public Optional<? extends Sentence> previousSentence(){
		return Filter.incomming(this.sentenceINode, SentenceStrategy.SENTENCE_TO_SENCTENCE_ARC_TYPE).map(
				(node) -> new ImprovedParseSentence(document, node)
				).findFirst();		
	}


}
