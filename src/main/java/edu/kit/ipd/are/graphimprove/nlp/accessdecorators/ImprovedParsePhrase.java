package edu.kit.ipd.are.graphimprove.nlp.accessdecorators;

import java.util.List;
import java.util.stream.Collectors;

import edu.kit.ipd.are.archdoclink.nlp.Annotation;
import edu.kit.ipd.are.archdoclink.nlp.Document;
import edu.kit.ipd.are.archdoclink.nlp.Phrase;
import edu.kit.ipd.are.archdoclink.nlp.PhraseType;
import edu.kit.ipd.are.archdoclink.nlp.Word;
import edu.kit.ipd.are.archdoclink.nlp.parse.ParseDocument;
import edu.kit.ipd.are.graphimprove.nlp.helper.Filter;
import edu.kit.ipd.are.graphimprove.nlp.helper.TextUtil;
import edu.kit.ipd.are.graphimprove.nlp.improvestrategies.PhraseEnum;
import edu.kit.ipd.are.graphimprove.nlp.improvestrategies.PhraseHelper;
import edu.kit.ipd.are.graphimprove.nlp.improvestrategies.PhraseStrategy;
import edu.kit.ipd.parse.luna.graph.INode;


/**
 *  Implement the access of phrase INodesm, which was generated by the PhraseStrategy
 * 
 * @author dominik
 *
 */
public class ImprovedParsePhrase implements Phrase {
	
	private INode node;

	public ImprovedParsePhrase(INode node) {
		this.node = node;
		
	}
	
	public PhraseEnum getChunkIOB() {
		return PhraseEnum.fromString((String) node.getAttributeValue(PhraseStrategy.CHUNKIOB_ATTRIBUTE_KEY));
	}

	@Override
	public String getText() {
		return TextUtil.concat(this.getWords());
	}

	@Override
	public void annotate(Document document, Annotation annotation) {
		document.annotate(annotation);
	}

	@Override
	public boolean containsWord(Word word) {
		return this.getWords().stream().anyMatch(wordInList -> wordInList.equals(word));		
	}

	@Override
	public String getTextWithoutLeadingStopwords() {
		return TextUtil.concat(this.getWords().stream().filter(word -> !word.isStopword()));
	}

	@Override
	public PhraseType getType() {
		return PhraseType.getPhraseType(getChunkIOB().getValue());
	}

	@Override
	public List<? extends Word> getWords() {
		PhraseEnum chunkIob = getChunkIOB();
		return Filter.incomming(this.node, PhraseHelper.asBeginnArcTypeName(chunkIob), PhraseHelper.asInsideArcTypeName(chunkIob))
				.map(node -> new ImprovedParseWord(node)).collect(Collectors.toList());
	}

}
